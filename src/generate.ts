import fs from "fs";
import path from "path";
import nunjucks from "nunjucks";

import cv from "./content/content.ts";
import icons from "./content/icons.ts";
import { generatePdfDocument } from "./pdf/pdf.ts";

const TEMPLATES_DIRECTORY = "templates";
const MAIN_TEMPLATE = "main.njk";
const OUTPUT_DIRECTORY = "docs";
const OUTPUT_DOCUMENT = path.join(OUTPUT_DIRECTORY, "index.html");
const OUTPUT_PDF = path.join(OUTPUT_DIRECTORY, "CV.pdf");

generateDocument()
  .then(() => {
    console.log("✅ Document generated successfully.");
  })
  .catch((error) => {
    console.error("❌ Error generating document:", error);
  });

async function generateDocument() {
  // Rename styles.scss that was generated by Tailwind CSS and manually include a hash in the filename
  let stylesCssFileName = "styles.css";
  const stylesFilePath = path.join(OUTPUT_DIRECTORY, stylesCssFileName);

  if (fs.existsSync(stylesFilePath)) {
    const stylesContent = await fs.promises.readFile(stylesFilePath, "utf-8");
    const hash = Buffer.from(stylesContent).toString("base64").substring(0, 8);
    stylesCssFileName = `styles.${hash}.css`;
    const newStylesFilePath = path.join(OUTPUT_DIRECTORY, stylesCssFileName);
    await fs.promises.rename(stylesFilePath, newStylesFilePath);
    console.log(`Styles file renamed to ${stylesCssFileName}`);
  } else {
    throw new Error(`Styles file not found at ${stylesFilePath}`);
  }

  nunjucks.configure(TEMPLATES_DIRECTORY, { autoescape: true });
  const content = nunjucks.render(MAIN_TEMPLATE, {
    ...cv,
    icons_svg: icons,
    styles_css_file: stylesCssFileName,
  });

  // Web version
  await fs.promises.writeFile(OUTPUT_DOCUMENT, content, "utf-8");
  // PDF version
  if (!process.argv.includes("--no-pdf")) {
    await generatePdfDocument(OUTPUT_PDF, cv);
  }
}
